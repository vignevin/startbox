---
title: "startbox"
format:
  html:
    code-copy: true
    code-overflow: wrap
vignette: >
  %\VignetteIndexEntry{startbox}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

# Introduction

Le package {startbox} est dédié à la gestion et à l'analyse des données d'essais en protection phytosanitaire, en particulier pour la vigne.

```{r}
#| label: setup
library(startbox)
```

# Manipulation des données

Le package `{startbox}` propose plusieurs fonctions pour charger, importer et exporter des données en interaction avec un fichier standard Excel.

## Exporter le fichier Excel standard

Le package fonctionne avec un fichier Excel standard, qui stocke les données descriptives de l'essai (les modalités mises en place, les caractéristiques de la parcelle, le plan d'expérience) et les données observées. Ce modèle de fichier standard est accessible avec la fonction get_template_excel().

```{r}
#| label: get_template_excel
#| include: false

startbox::get_template_excel()

```

Vous pourrez compléter ultérieurement ce fichier directement dans Excel.

## Créer un objet `user_data`

Le package fonctionne avec un objet de classe `user_data`. Cet objet permet de manipuler dans l'environnement R les données d'observations et les métadonnées associées à un essai.

**La première étape est de créer cet objet.**

Deux cas sont possibles lors de la création :

-   **Sans fichier Excel :** l'objet est vide, aucune donnée n'est chargée.

-   **Avec un fichier Excel fourni :** le fichier est associé à l'objet, mais les données (observations et métadonnées) doivent être importées manuellement avec les fonctions dédiées.

```{r}
# Cas 1 : création d'un objet vide
mydata <- user_data$new()

# Cas 2 : création d'un objet avec fichier Excel existant
mydata2 <- user_data$new(trial_file = system.file("extdata","standard_exemple.xlsx",package="startbox"))
```

## Charger des données

### Charger les métadonnées

Les feuilles de métadonnées (placette, modalite) peuvent être chargées dans l'environnement R à tout moment à l'aide de la fonction `load_metadata_sheets`, en passant en argument l'objet `user_data`. Il est nécessaire qu'un fichier ait été transmit dans excel_data_trial sinon ça ne fonctionnera pas.

Elles sont stockées dans l'objet de classe `user_data.`

```{r}
load_metadata_sheets(mydata2)
```

### Charger les feuilles d'observations

La fonction `import_data_sheets` permet de charger dans l'environnement de travail toutes les feuilles dont le nom commence par 'data\_'.

Elles sont stockées dans l'objet de classe `user_data.`

```{r}
load_data_sheets(mydata2)

```

### Utiliser le wrapper complet pour charger les données

Pour automatiser l'ensemble des étapes de chargement des données, la fonction `wrapper_data` permet de réaliser les fonctions `load_metadata_sheets` et `load_data_sheets` en une seule commande.

```{r}
wrapper_data(mydata2)
```

## Importer des données d'observation

### Cas de données déjà standardisées

Il est possible d'ajouter directement un tableau de données (`data.frame`) dans l'attribut `obs_data` de l'objet `user_data.` Cela peut être pratique si l'utilisateur travaille avec un fichier `.csv` brut ou des données créées directement dans R. Pour être utilisable par la suite, le tableau de données doit contenir les colonnes plot_id, observation_date et au moins une colonne avec une variable mesurée.

```{r}
# Exemple : chargement d'un fichier CSV local
myfilepath <- system.file("extdata","teisso_2024_dataF2.csv",package="startbox")
data1 <- read.csv2(myfilepath)

# Ajout direct dans l'objet user_data avec le nom du fichier
mydata2$add_obs(name = basename(myfilepath), df = data1)
```

L'utilisateur pourra ultérieurement exporter le fichier Excel standardisé avec une nouvelle feuille qui contiendra ces données d'observations.

### Cas des données Topvigne

Les données d'observation peuvent aussi provenir de l'application Topvigne.

Il est possible d'utiliser la fonction `standardise_topvigne_csv` qui permet de transformer et standardiser les données collectées avec Topvigne.

```{r}
#| label: load_obs

file_path <- system.file("extdata","maladie_teisso_2024_11h12min_F1_17.06.csv",package="startbox")

# verification si le fichier est issu de topvigne & importation 
data_F1 <- standardise_topvigne_csv(file_path)
head(data_F1)
```

Les données sont ensuite ajoutées à l'objet `user_data`.

```{r}
# Ajout direct dans l'objet user_data avec le nom du fichier
mydata2$add_obs(name = "F1", df = data_F1)
```

## Exporter les données

La fonction `export_data_sheets` permet de créer une nouvelle version du fichier Excel en y ajoutant les feuilles data présentes dans l'objet. Le fichier est exporté avec un horodatage automatique.

```{r}
#| include: false
#| 
export_data_sheets(mydata2)
```

# Calculer les tableaux de résumé

Le jeu de données d'observation qui sera utilisé à titre d'exemple est le jeu de données d'observation des notations brutes de mildiou sur feuilles réalisées le 17 juin 2024, préalablement importé dans `mydata2`.

Par commodité, il est stocké dans le `dataframe` data_F1.

```{r}
data_F1 <- mydata2$obs_data$F1
head(data_F1)
```

### Préparation des données avant analyse

Pour analyser les données observées, il est nécessaire d'associer chaque placette à une modalité expérimentale.

#### Par association avec les tables descriptives de l'essai

#### Par décodage des identifiants de placette \[non recommandé\]

Si la table d'association entre les identifiants des placettes et les modalités n'existe pas, il est possible de décoder les identifiants des placettes pour en extraire la partie concernant le code de la modalité.

Dans notre exemple, les identifiants de placette `plot_id` ont un codage du type "1A", ou 1 est le code de la modalité, et A le code du bloc. Les noms de bloc sont donnés dans la colonne `plot_block`

La fonction `remove_string_pairwise` permet d'enlever le nom du bloc de `plot_id`.

Avant de poursuivre, il est possible d'extraire quelques informations de plot_id pour enrichir notre tableau avec le code du traitement et le code du bloc.

```{r}
# recuperation des codes des traitements dans la colonne xp_trt_code
data_F1$xp_trt_code <- remove_string_pairwise(vec=data_F1$plot_id,
                                              pattern = data_F1$plot_block)

head(data_F1)
```

::: callout-caution
Cette fonction est à utiliser avec précaution ! Dans tous les cas, il est préférable de **compléter les feuilles placette et modalité** dans le fichier standard. Cela permet en outre d'enrichir les données avec le nom des traitements et la position des placettes.
:::

## Fonctions de calcul

### Description des fonctions

Le tableau ci-dessous résume les fonctions intégrées au package :

| Calcul | Fonction {startbox} | Description |
|------------------------|------------------------|------------------------|
| Fréquence d'attaque | `incidence` | Cette fonction calcule la fréquence de la maladie dans la population observée, c'est à dire le nombre d'unités échantillonnées (feuilles, régimes, plantes…) atteintes exprimé en pourcentage du nombre total d'unités évaluées. |
| Intensité d'attaque | `intensity` | Cette fonction calcule l'intensité de la maladie, comme la valeur moyenne des mesures de séverité. L'intensité de la maladie correspond à la quantité de maladie présente dans la population, exprimée en pourcentage. |
| Efficacité | `efficacy` | Cette fonction calcule l'efficacité, c'est à dire le niveau de réduction des organismes nuisibles ciblés ou des dommages qu'ils causent à la plante, après application d'un traitement, par rapport à un témoin non traité. L'efficacité est exprimée en pourcentage. |
| Sévérité sur les unités malades | `severity_diseased` | Cette fonction calcule la séverité de la maladie, comme la valeur moyenne des mesures de séverité pour les unités malades UNIQUEMENT (feuilles, grappes, plantes…). La ​​séverité de la maladie correspond à la superficie d'une unité d'échantillonnage affectée par la maladie, exprimée en pourcentage de la superficie totale. |

### Exemples de calcul

```{r}

obs_moda <- c(0,0,0,0,10,5,0,2,0,0,0,15,20,50)
obs_tnt <- c(10,20,60,0,100,50,0,20,0,10,20,15,2,50)


incidence(obs_moda)
intensity(obs_moda)
severity_diseased(obs_moda)

# l'efficacité est calculée en comparant une valeur dans une modalité à la valeur de la même variable obtentue dans le témoin non traité
efficacy(incidence(obs_moda),
         value_tnt = incidence(obs_tnt))
```

## Calcul de la fréquence et de l'intensité d'attaque à partir d'un jeu de données d'observations

La fréquence et l'intensité d'attaque sont calculées par défaut à partir des données brutes avec la fonction `resume_data()`. Le paramètre `group_cols` permet de définir les colonnes qui regroupent les données entre elles. Dans l'exemple ci-dessous, on calcule frequence et intensité d'attaque par `plot_id` (placette), sur la variable `PM_LEAF_PC`.

Le résultat est un dataframe, incluant une colonne `calculation` qui précise le nom des fonctions appliquées sur la variable et une colonne `value` qui donne les valeurs calculées.

### Calcul par placette

```{r}
#| lable: load_obs

F_I_placette <- resume_data(data_F1,
                            var_col = "PM_LEAF_PC", 
                            group_cols = c("plot_id","xp_trt_code","plot_block"),
                            funs = list(intensite = intensity, frequence = incidence))
head(F_I_placette)
```

Il est possible de passer un tableau résumé en format "wide" avec la fonction `resume_pivot_wider`.

```{r}
head(resume_pivot_wider(F_I_placette))
```

### Calcul par modalité

Une fois le calcul fait par placette, il est possible de faire la moyenne par modalité. Il suffit de réappliquer la fonction `resume_data` sur le tableau précédent en demandant un calcul de moyenne avec la fonction `mean`, que l'on peut compléter par le calcul de l'écart-type avec la fonction `sd`.

Ici le calcul est fait uniquement sur la fréquence pour rendre plus lisible l'affichage.

```{r}
F_moda <- resume_data(F_I_placette %>% dplyr::filter(calculation == "frequence PM_LEAF_PC"),
                      var_col = "value",
                      group_cols = c("xp_trt_code"),
                      funs = list(moyenne = mean, ecart_type = sd))
head(resume_pivot_wider(F_moda))
```

Avec la même logique, il est possible de faire le calcul par bloc.

## Calcul de l'efficacité

::: callout-important
L'efficacité se calcule sur l'intensité d'attaque ou sur la fréquence d'attaque. Il faut donc au préalable avoir réalisé ces calculs en utilisant la fonction resume_data.
:::

L'objectif est de calculer l'efficacité du traitement pour chaque placette, à la fois sur la fréquence et l'intensité d'attaque. Pour réaliser le calcul, nous allons donc appliquer la fonction `efficacy` sur les valeurs de fréquence et d'intensité calculées par placette précédemment avec la fonction `resume_data`, en regroupant par `plot_id`.

### Efficacité calculée à partir de la moyenne de tous les TNT

Dans le cas le plus simple, l'efficacité de traitement est calculée pour chaque placette à partir de la moyenne de tous les TNT [^1]. Il s'agit du cas par défaut.

[^1]: Par défaut, les observations concernant les TNT sont identifés en recherchant la chaîne de charactères "TNT" dans les lignes du tableau.

```{r}
eff_par_placette <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id"),
            funs=list(efficacite=efficacy))
head(eff_par_placette)

```

### Efficacité calculée à l'aide d'une table d'association

Il est possible d'avoir des situations plus complexes, ou l'efficacité est calculée par rapport au TNT de chaque bloc, ou même selon une table d'association qui associe à chaque placette `plot_id` le TNT à prendre en référence, identifié dans ce cas par `tnt_id` (c'est à dire le `plot_id` pour le TNT).

#### Génération d'une table d'association

```{r}
df_plot_tnt <- data.frame(tnt_id=rep(paste0("TNT",1:4),11),
                          plot_id = sample(unique(F_I_placette$plot_id)))
df_plot_tnt %>%
  dplyr::mutate(tnt_id = dplyr::case_when(
    plot_id == "TNT1" ~ "TNT1",
    plot_id == "TNT2" ~ "TNT2",
    plot_id == "TNT3" ~ "TNT3",
    plot_id == "TNT4" ~ "TNT4",
    TRUE ~ tnt_id,
  )) -> df_plot_tnt

# visualisation de la table d'association
head(df_plot_tnt)
```

#### Calcul de l'efficacité avec la table d'association

```{r}
# calcul de l'efficacité en tenant compte de l'association de chaque placette avec son TNT
eff_placette_tnt <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id"),
            funs=list(efficacite=efficacy),
            df_tnt = df_plot_tnt)
head(eff_placette_tnt)
```

# Réaliser l'analyse statistique

Le package `{startbox}` propose des fonctions pour appliquer automatiquement des tests statistiques (ANOVA, Kruskal-Wallis) sur les variables observées.

La fonction `test_stats()` permet de comparer les modalités de traitement en fonction de la variable d'intérêt. Elle retourne le test utilisé, la p_valeur du test et les groupes des modalites dans le dataframe.

```{r}
## tableau bilan sur la fréquence
F_plot <- resume_data(data_F1,
                            var_col = "PM_LEAF_PC", 
                            group_cols = c("plot_id","xp_trt_code","plot_block"),
                            funs = list(frequence = incidence, intensité = intensity))

test_stats(data = F_plot, value_col = "value")
```

# Réaliser les graphiques

Les données résumées ou les résultats statistiques peuvent être visualisés sous forme de barplots ou de heatmaps pour une meilleure lecture des différences entre modalités.

Pour la réalisation de la heatmap il est nécessaire d'utiliser la fonction merge_data_metadata car il faut joindre toutes les données du fichiers (metadata et feuille "data\_"). Pour les autres graphiques c'est aussi intéressant pour obtenir des informations plus précises sur les modalités par exemple.

```{r}

df_complet <- merge(F_plot, mydata2$metadata$moda_desc, all.x=T)
df_complet <- merge(df_complet, mydata2$metadata$plot_desc, all.x=T)
print(head(df_complet))
```

## Barplot

La fonction plot_xpbar permet de réaliser un graphique classique, dit "en batons".

```{r}
plot_xpbar(df_complet,xcol="xp_trt_code",ycol="value",fillcol="calculation",show_errorbar = T)
```

## Heatmap

La fonction `plot_xpheat` permet de visualiser l’intensité ou la fréquence d’attaque directement sur une carte thermique, en représentant les valeurs par placette sous forme de couleurs. Cela facilite l’identification des zones les plus touchées ou les effets spatiaux éventuels dans la parcelle.

```{r}
plot_xpheat(df_complet, variable = "value", caption = "IFV")
```

## Boxplot

La fonction plot_xpbox() permet de visualiser la répartition des valeurs observées pour chaque modalité sous forme de boîtes à moustaches. Ce type de graphique est particulièrement utile pour : - évaluer la dispersion des observations, - identifier les valeurs extrêmes ou atypiques, - comparer visuellement les distributions entre modalités.

```{r}
library(dplyr)

plot_xpbox(df_complet, calculation_type = "frequence", show_dots = TRUE)
```
