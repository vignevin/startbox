---
title: "startbox"
vignette: >
  %\VignetteIndexEntry{startbox}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

# Introduction

Le package {startbox} est dédié à la gestion et à l'analyse des données d'essais en protection phytosanitaire, en particulier pour la vigne.

```{r}
#| label: setup
library(startbox)
```

# Manipulation des données

## Importer un fichier Excel standard

Le package fonctionne avec un fichier Excel standard, qui stocke les données descriptives de l'essai (les modalités mises en place, les caractéristiques de la parcelles, le plan d'expérience) et les données observées.

Un modèle de fichier standard est accessible avec la fonction get_template_excel().

```{r}
#| label: get_template_excel

startbox::get_template_excel()

```

## Gestion des données d'observation dans Excel

Le package `{startbox}` propose plusieurs fonctions pour faciliter l'import, l'export et la mise à jour des feuilles d'observations (`data_*`) dans un fichier Excel d'essai.

### Créer un objet `user_data`

L'objet principal utilisé est `user_data`, qui permet de centraliser les données d'observations et les métadonnées associées à un essai.

Deux cas sont possibles lors de la création :

-   **Sans fichier Excel :** l'objet est vide, aucune donnée n'est chargée.

-   **Avec un fichier Excel fourni :** le fichier est associé à l'objet, mais les données (observations et métadonnées) doivent être importées manuellement avec les fonctions dédiées.

```{r}
# Cas 1 : création d'un objet vide
mydata <- user_data$new()

# Cas 2 : création d'un objet avec fichier Excel existant
mydata2 <- user_data$new(trial_file = system.file("extdata","data_standard_ex.xlsx",package="startbox"))
```

### Ajouter manuellement des observations dans l'objet `user_data`

Il est possible d'ajouter directement un tableau de données (`data.frame`) dans l'attribut `obs_data` de l'objet `user_data` pour pouvoir le charger dans son fichiequi répertorie les observations de son essais.

Cela peut être pratique si l'utilisateur travaille avec un fichier `.csv` brut ou des données créées directement dans R.

```{r}
# Exemple : chargement d'un fichier CSV local
myfilepath <- system.file("extdata","teissonniere_dataG1_2024.csv",package="startbox")
data1 <- read.csv2(myfilepath)

# Ajout direct dans l'objet user_data avec le nom du fichier
mydata2$add_obs(name = basename(myfilepath), df = data1)
```

### Importer les métadonnées

Les feuilles de métadonnées (placette, modalite) peuvent être importées à tout moment à l'aide de la fonction `load_metadata_sheets`, en passant en argument l'objet `user_data`. Il est nécessaire qu'un fichier ait été transmit dans excel_data_trial sinon ça ne fonctionnera pas.

```{r}
load_metadata_sheets(mydata2)
```

### Importer les feuilles d'observations

La fonction `import_data_sheets` permet d'importer toutes les feuilles dont le nom commence par data\_ dans l'attribut obs_data.

```{r}
load_data_sheets(mydata2,system.file("extdata","data_standard_ex.xlsx",package="startbox"))

```

### Exporter les données d'observations

La fonction `export_data_sheets` permet de créer une nouvelle version du fichier Excel en y ajoutant les feuilles data présentes dans l'objet. Le fichier est exporté dans le dossier Téléchargements avec un horodatage automatique.

```{r}
export_data_sheets(mydata2)
```

### Utiliser le wrapper complet

Pour automatiser l'ensemble des étapes (import des données data\_\* puis export vers un nouveau fichier Excel), la fonction `wrapper_data` permet de réaliser ces deux actions en une seule commande.

```{r}
wrapper_data(mydata2)
```

# Calculer les tableaux de résumé

## Chargement d'un jeu de données

Un jeu de données d'observation est accessible dans le fichier "maladie_Bayer_11h12min F1 17.06_ASC.csv", proposé comme exemple dans le package {startbox}. Ce jeu de données d'observation contient des notations brutes de mildiou sur feuilles réalisées le 17 juin 2024.

```{r}
#| lable: load_obs

file_path <- system.file("extdata","maladie_Bayer_11h12min F1 17.06_ASC.csv",package="startbox")
data_F1 <- utils::read.csv2(file_path, fileEncoding = "latin1")
head(data_F1)
```

Avant de poursuivre, il est possible d'extraire quelques informations de plot_id pour enrichir notre tableau avec le code du traitement et le code du bloc

```{r}
# recuperation des codes des traitements dans la colonne xp_trt_code
data_F1$xp_trt_code <- remove_string_pairwise(vec=data_F1$Placette,pattern = data_F1$Bloc)

head(data_F1)
```

## Fonctions de calcul

### Description des fonctions

Le tableau ci-dessous résume les fonctions intégrées au package :

| Calcul | Fonction {startbox} | Description |
|--------------------------|------------------------|------------------------|
| Fréquence d'attaque | `incidence` | Cette fonction calcule la fréquence de la maladie dans la population observée, c'est à dire le nombre d'unités échantillonnées (feuilles, régimes, plantes…) atteintes exprimé en pourcentage du nombre total d'unités évaluées. |
| Intensité d'attaque | `intensity` | Cette fonction calcule l'intensité de la maladie, comme la valeur moyenne des mesures de séverité. L'intensité de la maladie correspond à la quantité de maladie présente dans la population, exprimée en pourcentage. |
| Efficacité | `efficacy` | Cette fonction calcule l'efficacité, c'est à dire le niveau de réduction des organismes nuisibles ciblés ou des dommages qu'ils causent à la plante, après application d'un traitement, par rapport à un témoin non traité. L'efficacité est exprimée en pourcentage. |
| Sévérité sur les unités malades | `severity_diseased` | Cette fonction calcule la séverité de la maladie, comme la valeur moyenne des mesures de séverité pour les unités malades UNIQUEMENT (feuilles, grappes, plantes…). La ​​séverité de la maladie correspond à la superficie d'une unité d'échantillonnage affectée par la maladie, exprimée en pourcentage de la superficie totale. |

### Exemples de calcul

```{r}

obs_moda <- c(0,0,0,0,10,5,0,2,0,0,0,15,20,50)
obs_tnt <- c(10,20,60,0,100,50,0,20,0,10,20,15,2,50)


incidence(obs_moda)
intensity(obs_moda)
severity_diseased(obs_moda)

# l'efficacité est calculée en comparant une valeur dans une modalité à la valeur de la même variable obtentue dans le témoin non traité
efficacy(incidence(obs_moda),
         value_tnt = incidence(obs_tnt))
```

## Calcul de la fréquence et de l'intensité d'attaque à partir d'un jeu de données d'observations

La fréquence et l'intensité d'attaque sont calculées par défaut à partir des données brutes avec la fonction `resume_data()`. Le paramètre `group_cols` permet de définir les colonnes qui regroupent les données entre elles. Dans l'exemple ci-dessous, on calcule frequence et intensité d'attaque par `plot_id` (placette), sur la variable `PM_LEAF_PC`.

Le résultat est un dataframe, incluant une colonne `calculation` qui précise le nom des fonctions appliquées sur la variable et une colonne `value` qui donne les valeurs calculées.

### Calcul par placette

```{r}
#| lable: load_obs

F_I_placette <- resume_data(data_F1,
                            var_col = "PM_LEAF_PC", 
                            group_cols = c("plot_id","xp_trt_code","block_id"),
                            funs = list(intensite = intensity, frequence = incidence))
head(F_I_placette)
```

Il est possible de passer un tableau résumé en format "wide" avec la fonction `resume_pivot_wider`.

```{r}
head(resume_pivot_wider(F_I_placette))
```

### Calcul par modalité

Une fois le calcul fait par placette, il est possible de faire la moyenne par modalité. Il suffit de réappliquer la fonction `resume_data` sur le tableau précédent en demandant un calcul de moyenne avec la fonction `mean`, que l'on peut compléter par le calcul de l'écart-type avec la fonction `sd`.

Ici le calcul est fait uniquement sur la fréquence pour rendre plus lisible l'affichage.

```{r}
F_moda <- resume_data(F_I_placette %>% dplyr::filter(calculation == "frequence PM_LEAF_PC"),
                      var_col = "value",
                      group_cols = c("xp_trt_code"),
                      funs = list(moyenne = mean, ecart_type = sd))
head(resume_pivot_wider(F_moda))
```

Avec la même logique, il est possible de faire le calcul par bloc.

## Calcul de l'efficacité

::: callout-important
L'efficacité se calcule sur l'intensité d'attaque ou sur la fréquence d'attaque. Il faut donc au préalable avoir réalisé ces calculs en utilisant la fonction resume_data.
:::

L'objectif est de calculer l'efficacité du traitement pour chaque placette, à la fois sur la fréquence et l'intensité d'attaque. Pour réaliser le calcul, nous allons donc appliquer la fonction `efficacy` sur les valeurs de fréquence et d'intensité calculées par placette précédemment avec la fonction `resume_data`, en regroupant par `plot_id`.

### Efficacité calculée à partir de la moyenne de tous les TNT

Dans le cas le plus simple, l'efficacité de traitement est calculée pour chaque placette à partir de la moyenne de tous les TNT [^1]. Il s'agit du cas par défaut.

[^1]: Par défaut, les observations concernant les TNT sont identifés en recherchant la chaîne de charactères "TNT" dans les lignes du tableau.

```{r}
eff_par_placette <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id"),
            funs=list(efficacite=efficacy))
head(eff_par_placette)

```

### Efficacité calculée à l'aide d'une table d'association

Il est possible d'avoir des situations plus complexes, ou l'efficacité est calculée par rapport au TNT de chaque bloc, ou même selon une table d'association qui associe à chaque placette `plot_id` le TNT à prendre en référence, identifié dans ce cas par `tnt_id` (c'est à dire le `plot_id` pour le TNT).

#### Génération d'une table d'association

```{r}
df_plot_tnt <- data.frame(tnt_id=rep(paste0("TNT",1:4),11),
                          plot_id = sample(unique(F_I_placette$plot_id)))
df_plot_tnt %>%
  dplyr::mutate(tnt_id = dplyr::case_when(
    plot_id == "TNT1" ~ "TNT1",
    plot_id == "TNT2" ~ "TNT2",
    plot_id == "TNT3" ~ "TNT3",
    plot_id == "TNT4" ~ "TNT4",
    TRUE ~ tnt_id,
  )) -> df_plot_tnt

# visualisation de la table d'association
head(df_plot_tnt)
```

#### Calcul de l'efficacité avec la table d'association

```{r}
# calcul de l'efficacité en tenant compte de l'association de chaque placette avec son TNT
eff_placette_tnt <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id"),
            funs=list(efficacite=efficacy),
            df_tnt = df_plot_tnt)
head(eff_placette_tnt)
```

## Réaliser l'analyse statistiques

Le package `{startbox}` propose des fonctions pour appliquer automatiquement des tests statistiques (ANOVA, Kruskal-Wallis) sur les variables observées.

La fonction `test_stats()` permet de comparer les modalités de traitement en fonction de la variable d'intérêt.

```{r}
res_stats <- test_stats(
  data = F_I_placette,
  var_col = "value",
  group_col = "plot_id",
  block_col = NULL,
  group_method = "SNK"
)

head(res_stats)

```
## Réaliser les graphiques

Les données résumées ou les résultats statistiques peuvent être visualisés sous forme de barplots ou de heatmaps pour une meilleure lecture des différences entre modalités.
Pour la réalisation de la heatmap il est nécessaire d'utiliser la fonction prepare_final_data car il faut joindre toutes les données du fichiers (metadata et feuille "data_"). Pour les autres graphiques c'est aussi intéressant pour obtenir des informations plus précises sur les modalite par exemple.

```{r}
mydata <- user_data$new(trial_file = "D:/IFV/App Rshiny (Hervé)/data_standard_ex.xlsx")
myfilepath = "C:/Users/hmaire.VIGNEVIN/OneDrive - IFV/Documents/startbox/misc/teissonniere_dataF1_2024.csv"
data1 <- read.csv2(myfilepath)
# Add the data frame
mydata$add_obs(name = basename(myfilepath), df = data1, overwrite = TRUE)
df_complet <- prepare_final_data(mydata)
```
### Heatmap

La fonction plot_xpheat() permet de visualiser l’intensité ou la fréquence d’attaque directement sur une carte thermique, en représentant les valeurs par placette sous forme de couleurs.
Cela facilite l’identification des zones les plus touchées ou les effets spatiaux éventuels dans la parcelle.

```{r}
plot_xpheat(df_complet, variable = "PM_LEAF_PC")
```

