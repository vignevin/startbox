---
title: "startbox"
vignette: >
  %\VignetteIndexEntry{startbox}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

# Introduction

Le package {startbox} est dédié à la gestion et à l'analyse des données d'essais en protection phytosanitaire, en particulier pour la vigne.

```{r}
#| label: setup
library(startbox)
```

# Manipulation des données

## Importer un fichier Excel standard

Le package fonctionne avec un fichier Excel standard, qui stocke les données descriptives de l'essai (les modalités mises en place, les caractéristiques de la parcelles, le plan d'expérience) et les données observées.

Un modèle de fichier standard est accessible avec la fonction get_template_excel().

```{r}
#| label: get_template_excel

get_template_excel()

```

## Gestion des données d'observation dans Excel

Le package `{startbox}` propose plusieurs fonctions pour faciliter l'import, l'export et la mise à jour des feuilles d'observations (`data_*`) dans un fichier Excel d'essai.

### Créer un objet `user_data`

L'objet principal utilisé est `user_data`, qui permet de centraliser les données d'observations et les métadonnées associées à un essai.

Deux cas sont possibles lors de la création : - **Sans fichier Excel :** l'objet est vide, aucune donnée n'est chargée. - **Avec un fichier Excel fourni :** le fichier est associé à l'objet, mais les données (observations et métadonnées) doivent être importées manuellement avec les fonctions dédiées.

```{r}
# Cas 1 : création d'un objet vide
mydata <- user_data$new()

# Cas 2 : création d'un objet avec fichier Excel existant
mydata2 <- user_data$new(excel_data_trial = system.file("extdata","data_standard_ex.xlsx",package="startbox"))
```

### Ajouter manuellement des observations dans l'objet `user_data`

Il est possible d'ajouter directement un tableau de données (`data.frame`) dans l'attribut `obs_data` de l'objet `user_data` pour pouvoir le charger dans son fichiequi répertorie les observations de son essais.

Cela peut être pratique si l'utilisateur travaille avec un fichier `.csv` brut ou des données créées directement dans R.

```{r}
# Exemple : chargement d'un fichier CSV local
myfilepath <- system.file("extdata","teissonniere_dataG1_2024.csv",package="startbox")
data1 <- read.csv2(myfilepath)

# Ajout direct dans l'objet user_data avec le nom du fichier
mydata2$add_obs(name = basename(myfilepath), df = data1)
```

### Importer les métadonnées

Les feuilles de métadonnées (placette, modalite) peuvent être importées à tout moment à l'aide de la fonction read_metadata_sheets(), en passant en argument l'objet `user_data`. Il est nécessaire qu'un fichier ai été transmit dans excel_data_trial sinon ça ne fonctionnera pas.

```{r}
read_metadata_sheets(mydata2)
```

### Importer les feuilles d'observations

La fonction import_data_sheets() permet d'importer toutes les feuilles dont le nom commence par data\_ dans l'attribut obs_data.

```{r}
import_data_sheets(mydata2,system.file("extdata","data_standard_ex.xlsx",package="startbox"))

```

### Exporter les données d'observations

La fonction export_data_sheets() permet de créer une nouvelle version du fichier Excel en y ajoutant les feuilles data\_\* présentes dans l'objet. Le fichier est exporté dans le dossier Téléchargements avec un horodatage automatique.

```{r}
export_data_sheets(mydata2)
```

### Utiliser le wrapper complet

Pour automatiser l'ensemble des étapes (import des données data\_\* puis export vers un nouveau fichier Excel), la fonction wrapper_data() permet de réaliser ces deux actions en une seule commande.

```{r}
wrapper_data(mydata2)
```

## Calculer les tableaux de résumé

### Chargement d'un jeu de données

Un jeu de données d'observation est accessible dans le fichier "data_standard_ex.xlsx", proposé comme exepmle dans le package {startbox}. Ce jeu de données d'observation contient des notations brutes d'oïdium sur feuilles réalisées le 05 juin 2024.

```{r}
#| lable: load_obs

file_path <- system.file("extdata","data_standard_ex.xlsx",package="startbox")
data_F1 <- openxlsx2::read_xlsx(file_path,sheet ="data_F1")
head(data_F1)
```

### Calcul de la fréquence et de l'intensité d'attaque

La fréquence et l'intensité d'attaque sont calculées par défaut à partir des données brutes avec la fonction resume_data(). Le paramètre group_cols permets de définir les colonnes qui regroupent les données entre elles. Dans l'exemple ci-dessous, on calcule frequence et intensité d'attaque par placette ('plot_id'). Le résultat est un dataframe, incluant une colonne 'calculation' qui précise le nom des fonctions appliquées.

```{r}
#| lable: load_obs

F_I_placette <- resume_data(data_F1,var_col = "PM_LEAF_PC", group_cols = c("plot_id"),funs = list(intensite = mean, frequence = frequency))
head(F_I_placette)
```

### Calcul de l'efficacité

Dans le cas le plus simple, l'efficacité de traitement est calculée pour chaque placette à partir de la moyenne des TNT de l'essai. Il s'agit du cas par défaut.

```{r}
eff_par_placette <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id","calculation"),
            funs=list(efficacite=efficacy))
head(eff_par_placette)

```

Il est possible d'avoir des situations plus complexes, ou l'efficacité est calculée par rapport au TNT de chaque bloc, ou même selon une table d'association qui associe à chaque placette 'plot_id' le TNT à prendre en référence, identifié dans ce cas par 'tnt_id' (qui est le 'plot_id' du TNT).

```{r}
df_plot_tnt <- data.frame(tnt_id=rep(paste0("TNT",1:4),11),plot_id = sample(unique(F_I_placette$plot_id)))
df_plot_tnt %>%
  dplyr::mutate(tnt_id = dplyr::case_when(
    plot_id == "TNT1" ~ "TNT1",
    plot_id == "TNT2" ~ "TNT2",
    plot_id == "TNT3" ~ "TNT3",
    plot_id == "TNT4" ~ "TNT4",
    TRUE ~ tnt_id,
  )) -> df_plot_tnt


eff_placette_tnt <- resume_data(F_I_placette,
            var_col = "value",
            group_cols = c("plot_id","calculation"),
            funs=list(efficacite=efficacy),
            df_tnt = df_plot_tnt)
head(eff_placette_tnt)

```
